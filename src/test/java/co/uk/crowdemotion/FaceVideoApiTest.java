/**
 * CloudEmotion API v1
 * CrowdEmotion API
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package co.uk.crowdemotion;

import co.uk.crowdemotion.ApiException;
import io.swagger.client.model.FaceVideo;
import java.io.File;
import io.swagger.client.model.FaceVideoUpload;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FaceVideoApi
 */
public class FaceVideoApiTest {

    private final FaceVideoApi api = new FaceVideoApi();

    
    /**
     * Delete a FaceVideo
     *
     * &lt;p&gt;Use this operation to delete a FaceVideo.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✗ Respondent ✗ Customer ✓ Manager&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void facevideoFacevideoIdDeleteTest() throws ApiException {
        Integer facevideoId = null;
        // String response = api.facevideoFacevideoIdDelete(facevideoId);

        // TODO: test validations
    }
    
    /**
     * Find a FaceVideo
     *
     * &lt;p&gt;Use this operation to access information about the FaceVideo analysis.&lt;/p&gt; &lt;p&gt;&lt;i&gt;Any one of the two parameters must be specified.&lt;/i&gt;&lt;/p&gt; &lt;p&gt;To discover if the video has been analyzed, check the meaning of status field in the following table:&lt;/p&gt; &lt;table&gt;   &lt;tr&gt;&lt;td&gt;Value&lt;/td&gt; &lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;0&lt;/td&gt; &lt;td&gt;Not started&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;1&lt;/td&gt; &lt;td&gt;Processing started&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;2&lt;/td&gt; &lt;td&gt;Processing completed&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;-1&lt;/td&gt; &lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✓ Respondent ✓ Customer ✓ Manager&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void facevideoGetTest() throws ApiException {
        Integer facevideoId = null;
        Integer responseId = null;
        // FaceVideo response = api.facevideoGet(facevideoId, responseId);

        // TODO: test validations
    }
    
    /**
     * Analyse FaceVideo
     *
     * &lt;p&gt;Starts the analysis of a single FaceVideo (in the supported formats) through either:&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;a video URL pointing to a resource accessible through the Internet without authentication&lt;/li&gt;   &lt;li&gt;the binary contents of the video in the request&#39;s body, encoded as &lt;code&gt;multipart/form-data&lt;/code&gt; content type&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The third option is a &lt;code&gt;PUT&lt;/code&gt; call to &lt;code&gt;/v1/facevideo/{filename}&lt;/code&gt; (&lt;code&gt;filename&lt;/code&gt; required string e.g. &lt;code&gt;facevideo1.mp4&lt;/code&gt;) which supports all the URL parameters as above with a body encoding &lt;code&gt;application/octet-stream&lt;/code&gt; and the file contents as plain binary: this call makes uploads more efficient but it does not respect HTTP/RESTful standards so it may be not supported in future.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✓ Respondent ✓ Customer ✓ Manager&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void facevideoPostTest() throws ApiException {
        File filename = null;
        Boolean sandbox = null;
        Integer responseId = null;
        Integer researchId = null;
        Integer mediaId = null;
        Integer respondentId = null;
        Boolean processVideo = null;
        // FaceVideo response = api.facevideoPost(filename, sandbox, responseId, researchId, mediaId, respondentId, processVideo);

        // TODO: test validations
    }
    
    /**
     * Analyse FaceVideo
     *
     * &lt;p&gt;Starts the analysis of a single FaceVideo (in the supported formats) through either:&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;a video URL pointing to a resource accessible through the Internet without authentication&lt;/li&gt;   &lt;li&gt;the binary contents of the video in the request&#39;s body, encoded as &lt;code&gt;multipart/form-data&lt;/code&gt; content type&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The third option is a &lt;code&gt;PUT&lt;/code&gt; call to &lt;code&gt;/v1/facevideo/{filename}&lt;/code&gt; (&lt;code&gt;filename&lt;/code&gt; required string e.g. &lt;code&gt;facevideo1.mp4&lt;/code&gt;) which supports all the URL parameters as above with a body encoding &lt;code&gt;application/octet-stream&lt;/code&gt; and the file contents as plain binary: this call makes uploads more efficient but it does not respect HTTP/RESTful standards so it may be not supported in future.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✓ Respondent ✓ Customer ✓ Manager&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void facevideoPutTest() throws ApiException {
        Boolean sandbox = null;
        Integer responseId = null;
        Integer researchId = null;
        Integer mediaId = null;
        Integer respondentId = null;
        Boolean processVideo = null;
        FaceVideoUpload body = null;
        // FaceVideo response = api.facevideoPut(sandbox, responseId, researchId, mediaId, respondentId, processVideo, body);

        // TODO: test validations
    }
    
}
